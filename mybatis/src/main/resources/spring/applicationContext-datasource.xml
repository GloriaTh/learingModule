<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="order" value="2"/>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="locations">
            <list>
                <value>classpath:datasource.properties</value>
            </list>
        </property>
        <property name="fileEncoding" value="utf-8"/>
    </bean>

    <bean id="mysqlDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${db.driverClassName}"/>
        <property name="url" value="${db.url}"/>
        <property name="username" value="${db.username}"/>
        <property name="password" value="${db.password}"/>
        <!-- 连接池启动时的初始值 -->
        <property name="initialSize" value="${db.initialSize}"/>
        <!-- 连接池的最大值 -->
        <property name="maxActive" value="${db.maxActive}"/>
        <!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
        <property name="minIdle" value="${db.minIdle}"/>
        <!-- 最大建立连接等待时间。如果超过此时间将接到异常。设为－1表示无限制 -->
        <property name="maxWait" value="${db.maxWait}"/>
        <!--#给出一条简单的sql语句进行验证 -->
        <!--<property name="validationQuery" value="select getdate()" />-->
        <property name="defaultAutoCommit" value="${db.defaultAutoCommit}"/>
        <!-- 回收被遗弃的（一般是忘了释放的）数据库连接到连接池中 -->
        <!--<property name="removeAbandoned" value="true" />-->
        <!-- 数据库连接过多长时间不用将被视为被遗弃而收回连接池中 -->
        <!--<property name="removeAbandonedTimeout" value="120" />-->
        <!-- #连接的超时时间，默认为半小时。 -->
        <property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}"/>

        <!--# 失效检查线程运行时间间隔，要小于MySQL默认-->
        <property name="timeBetweenEvictionRunsMillis" value="40000"/>
        <!--# 检查连接是否有效-->
        <property name="testWhileIdle" value="true"/>
        <!--# 检查连接有效性的SQL语句-->
        <property name="validationQuery" value="SELECT 1 FROM dual"/>
    </bean>

    <bean id="oracleDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <property name="driverClassName" value="${oracle.driverClassName}"/>
        <property name="url" value="${oracle.url}"/>
        <property name="username" value="${oracle.username}"/>
        <property name="password" value="${oracle.password}"/>
        <property name="initialSize" value="${db.initialSize}"/>
        <property name="maxActive" value="${db.maxActive}"/>
        <property name="minIdle" value="${db.minIdle}"/>
        <property name="maxWait" value="${db.maxWait}"/>
        <property name="defaultAutoCommit" value="${db.defaultAutoCommit}"/>
        <property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}"/>
        <property name="timeBetweenEvictionRunsMillis" value="40000"/>
        <property name="testWhileIdle" value="true"/>
        <property name="validationQuery" value="SELECT 1 FROM dual"/>
    </bean>

    <!--<bean id="dynamicDataSource" class="com.study.mybatis.datasource.DynamicDataSource">-->
    <!--<property name="targetDataSources">-->
    <!--<map>-->
    <!--<entry key="mysqlDataSource" value-ref="mysqlDataSource"/>-->
    <!--<entry key="oracleDataSource" value-ref="oracleDataSource"/>-->
    <!--</map>-->
    <!--</property>-->
    <!--<property name="defaultTargetDataSource" ref="mysqlDataSource"/>-->
    <!--</bean>-->

    <!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
    <!--&lt;!&ndash; dataSource bean &ndash;&gt;-->
    <!--<property name="dataSource" ref="dynamicDataSource"/>-->
    <!--<property name="mapperLocations" value="classpath*:mappers/*.xml"/>-->
    <!--</bean>-->

    <bean id="mysqlSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- dataSource bean -->
        <property name="dataSource" ref="mysqlDataSource"/>
        <property name="mapperLocations" value="classpath*:mappers/*.xml"/>
    </bean>

    <bean id="oracleSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- dataSource bean -->
        <property name="dataSource" ref="oracleDataSource"/>
        <property name="mapperLocations" value="classpath*:mappers/*.xml"/>
    </bean>

    <bean id="sessionFactory" class="com.study.mybatis.sessionfactory.DynamicSqlSessionFactoryImpl">
        <property name="defaultTargetSessionFactory" ref="mysqlSqlSessionFactory"/>
        <property name="targetSessionFactorys">
            <map>
                <entry value-ref="oracleSqlSessionFactory" key="oracleSqlSessionFactory"/>
                <entry value-ref="mysqlSqlSessionFactory" key="mysqlSqlSessionFactory"/>
            </map>
        </property>
    </bean>


    <bean name="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.study.mybatis.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sessionFactory"/>
    </bean>
</beans>