<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
	<!-- Modify-1 数据库配置文件 -->
	<properties resource="generator/generator-mysql.properties" />

	<classPathEntry location="C:\Users\Gloria\.m2\repository\mysql\mysql-connector-java\5.1.45\mysql-connector-java-5.1.45.jar" />

	<!-- Modify-2 修改目标运行时 MyBatis3、MyBatis3Simple -->
	<context id="context" defaultModelType="conditional" targetRuntime="MyBatis3Simple">

		<!-- 生成的Java文件的编码 -->
		<property name="javaFileEncoding" value="UTF-8" />
		<!-- 格式化java代码 -->
		<property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter" />
		<!-- 格式化XML代码 -->
		<property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter" />

		<commentGenerator>
			<!-- 是否去除自动生成的注释 true：是 ： false:否 -->
			<property name="suppressAllComments" value="true" />
		</commentGenerator>

		<!-- Modify-3 修改数据库连接 -->
		<jdbcConnection connectionURL="${mysql.url}" driverClass="${mysql.driver}" password="${mysql.password}" userId="${mysql.username}" />

		<!-- Modify-4 生成PO类的位置 -->
		<javaModelGenerator targetPackage="${pojo.targetPackage}" targetProject="${pojo.targetProject}">

			<!-- 从数据库返回的值被清理前后的空格 -->
			<property name="trimStrings" value="true" />
			<!-- enableSubPackages:是否让schema作为包的后缀 -->
			<property name="enableSubPackages" value="false" />
			<!-- 生成包含字段的构造方法 -->
			<property name="constructorBased" value="true" />
		</javaModelGenerator>

		<!-- Modify-5 mapper映射文件生成的位置 -->
		<sqlMapGenerator targetPackage="${mapper.targetPackage}" targetProject="${mapper.targetProject}">

			<!-- enableSubPackages:是否让schema作为包的后缀 -->
			<property name="enableSubPackages" value="false" />
		</sqlMapGenerator>

		<!-- Modify-6 mapper接口生成的位置 -->
		<javaClientGenerator targetPackage="${dao.targetPackage}" targetProject="${dao.targetProject}" type="XMLMAPPER">

			<!-- enableSubPackages:是否让schema作为包的后缀 -->
			<property name="enableSubPackages" value="false" />
		</javaClientGenerator>

		<!-- Modify-7 指定数据库表和自定义查询所有升降序查询.此处可以设置多个table元素指定多张表 -->
		<table tableName="permission">
			<!-- 如果选择的runtime是MyBatis3Simple，那么会生成一个SelectAll方法,如果指定了selectAllOrderByClause,那么会在该SQL中添加指定的这个order条件 -->
			<property name="selectAllOrderByClause" value="user_id ASC, userCreateDate DESC" />
		</table>
		<table tableName="role">
			<!-- 如果选择的runtime是MyBatis3Simple，那么会生成一个SelectAll方法,如果指定了selectAllOrderByClause,那么会在该SQL中添加指定的这个order条件 -->
			<property name="selectAllOrderByClause" value="user_id ASC, userCreateDate DESC" />
		</table>
		<table tableName="role_permission">
			<!-- 如果选择的runtime是MyBatis3Simple，那么会生成一个SelectAll方法,如果指定了selectAllOrderByClause,那么会在该SQL中添加指定的这个order条件 -->
			<property name="selectAllOrderByClause" value="user_id ASC, userCreateDate DESC" />
		</table>
		<table tableName="user">
			<!-- 如果选择的runtime是MyBatis3Simple，那么会生成一个SelectAll方法,如果指定了selectAllOrderByClause,那么会在该SQL中添加指定的这个order条件 -->
			<property name="selectAllOrderByClause" value="user_id ASC, userCreateDate DESC" />
		</table>
		<table tableName="user_role">
			<!-- 如果选择的runtime是MyBatis3Simple，那么会生成一个SelectAll方法,如果指定了selectAllOrderByClause,那么会在该SQL中添加指定的这个order条件 -->
			<property name="selectAllOrderByClause" value="user_id ASC, userCreateDate DESC" />
		</table>

	</context>
</generatorConfiguration>